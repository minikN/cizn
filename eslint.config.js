// Migrate built-in rules to @stylistic/js namespace
/* eslint @stylistic/migrate/migrate-js: "error" */
import eslint from '@eslint/js'
import stylisticJs from '@stylistic/eslint-plugin-js'
import stylisticMigrate from '@stylistic/eslint-plugin-migrate'
import jsdoc from 'eslint-plugin-jsdoc'
import globals from "globals"
import tseslint from 'typescript-eslint'

const rules = {
  '@stylistic/js/arrow-parens': [2, 'as-needed', { requireForBlockBody: true }],
  'no-await-in-loop': 0,
  'no-underscore-dangle': 0,
  'no-unused-expressions': [2, {
    allowShortCircuit: true,
    allowTernary: true,
  }],
  'no-return-await': 0,
  'constructor-super': 2,
  'for-direction': 2,
  'getter-return': 2,
  'no-case-declarations': 0,
  'no-class-assign': 2,
  'no-compare-neg-zero': 2,
  'no-cond-assign': 2,
  'no-const-assign': 2,
  'no-constant-condition': 2,
  'no-control-regex': 2,
  'no-debugger': 2,
  'no-delete-var': 2,
  'no-dupe-args': 2,
  'no-dupe-class-members': 2,
  'no-dupe-keys': 2,
  'no-duplicate-case': 2,
  'no-empty': [2, { allowEmptyCatch: true }],
  'no-empty-character-class': 2,
  'no-empty-pattern': 2,
  'no-ex-assign': 2,
  'no-extra-boolean-cast': 2,
  '@stylistic/js/no-extra-semi': 2,
  'no-fallthrough': 0,
  'no-func-assign': 2,
  'no-global-assign': 2,
  'no-inner-declarations': 2,
  'no-invalid-regexp': 2,
  'no-irregular-whitespace': 2,
  '@stylistic/js/no-mixed-spaces-and-tabs': 2,
  'no-new-symbol': 2,
  'no-obj-calls': 2,
  'no-octal': 2,
  'no-redeclare': 2,
  'no-regex-spaces': 2,
  'no-self-assign': 2,
  'no-sparse-arrays': 2,
  'no-this-before-super': 2,
  'no-undef': 'off',
  'no-unexpected-multiline': 2,
  'no-unreachable': 2,
  'no-unsafe-finally': 2,
  'no-unsafe-negation': 2,
  'no-unused-labels': 2,
  'no-useless-escape': 2,
  'require-yield': 2,
  'use-isnan': 2,
  'valid-typeof': 2,
  '@stylistic/js/no-trailing-spaces': 1,
  '@stylistic/js/arrow-spacing': 2,
  '@stylistic/js/comma-spacing': 2,
  '@stylistic/js/comma-dangle': [2, 'always-multiline'],
  'no-extend-native': 2,
  'no-extra-bind': 2,
  'no-undefined': 0,
  'no-undef-init': 2,
  'no-useless-call': 2,
  'no-useless-catch': 2,
  'no-useless-constructor': 2,
  'no-new-object': 2,
  'no-var': 2,
  '@stylistic/js/no-whitespace-before-property': 2,
  '@stylistic/js/object-curly-newline': [2, {
    ObjectExpression: { multiline: true, minProperties: 3 },
    ObjectPattern: { multiline: true, minProperties: 3 },
    ImportDeclaration: { multiline: true, minProperties: 3 },
    ExportDeclaration: { multiline: true, minProperties: 3 },
  }],
  '@stylistic/js/object-curly-spacing': [2, 'always'],
  '@stylistic/js/object-property-newline': 0,
  '@stylistic/js/one-var-declaration-per-line': 2,
  'one-var': 0,
  'no-useless-rename': 2,
  'no-useless-return': 2,
  'no-lone-blocks': 2,
  'no-duplicate-imports': 2,
  'no-eval': 2,
  camelcase: 2,
  '@stylistic/js/array-bracket-newline': [2, 'consistent'],
  'no-invalid-this': 2,
  'no-loop-func': 2,
  'no-lonely-if': 2,
  'no-restricted-exports': [2, { restrictedNamedExports: ['then'] }],
  '@stylistic/js/semi': [2, 'never'],
  'jsdoc/require-jsdoc': 2,
  '@stylistic/js/newline-per-chained-call': [2, { ignoreChainWithDepth: 3 }],
  '@stylistic/js/function-paren-newline': [2, 'consistent'],
  '@stylistic/js/space-in-parens': 2,
  '@stylistic/js/no-extra-parens': 2,
  '@stylistic/js/space-before-function-paren': 2,
  '@stylistic/js/no-multi-spaces': 2,
  '@stylistic/js/space-before-blocks': 2,
  '@stylistic/js/space-infix-ops': 2,
  '@stylistic/js/space-unary-ops': 2,
  '@stylistic/js/indent': ['error', 2, { SwitchCase: 1 }],
  'no-plusplus': 0,
  // handled by typescript
  '@typescript-eslint/no-explicit-any': 'off',
  '@typescript-eslint/ban-types': 'off',
  'no-unused-vars': 'off',
  // overrides
  '@typescript-eslint/no-unused-vars': 1,
}

export default [
  eslint.configs.recommended,
  ...tseslint.configs.recommended,
  { files: ['**/*.js'], languageOptions: { sourceType: 'module' } },
  { languageOptions: { globals: globals.browser } },
  {
    plugins: {
      jsdoc,
      '@stylistic/js': stylisticJs,
      '@stylistic/migrate': stylisticMigrate,
    },
    rules,
  },
]